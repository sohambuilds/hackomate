"use client";
import { useEffect, useMemo, useState } from "react";
import { api } from "@/lib/api";
import { Card, CardBody, CardHeader } from "@/components/ui/Card";
import { Button } from "@/components/ui/Button";
import PageHeader from "@/components/marketing/PageHeader";

export default function ChallengesPage() {
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [challenges, setChallenges] = useState<any[]>([]);
  const [query, setQuery] = useState("");
  const [difficulty, setDifficulty] = useState("");

  useEffect(() => {
    (async () => {
      try {
        setLoading(true);
        const res = await api.get("/challenges/", { params: { limit: 50 } });
        setChallenges(res.data || []);
      } catch (e: any) {
        setError(e?.message || "Failed to load");
      } finally {
        setLoading(false);
      }
    })();
  }, []);

  const filtered = useMemo(() => {
    return challenges.filter((c) => {
      const okQ = query ? (c.title?.toLowerCase().includes(query.toLowerCase()) || c.description?.toLowerCase().includes(query.toLowerCase())) : true;
      const okD = difficulty ? c.difficulty === difficulty : true;
      return okQ && okD;
    });
  }, [challenges, query, difficulty]);

  return (
    <main className="maxw">
      <PageHeader title="Challenges" subtitle="Browse and filter challenges posted by the organizers or generated by AI." />
      {error ? (
        <div className="glass px-6 py-4 border border-red-500/20 mb-6">
          <span className="text-red-400">Error:</span> {error}
        </div>
      ) : null}
      <Card>
        <CardHeader title="All Challenges" subtitle="Latest entries" />
        <CardBody>
          <div className="flex gap-3 mb-6">
            <input
              placeholder="Search challenges..."
              className="glass-input flex-1 text-sm"
              value={query}
              onChange={(e) => setQuery(e.target.value)}
            />
            <select
              className="glass-input text-sm min-w-[120px]"
              value={difficulty}
              onChange={(e) => setDifficulty(e.target.value)}
            >
              <option value="">All Difficulty</option>
              <option value="easy">Easy</option>
              <option value="medium">Medium</option>
              <option value="hard">Hard</option>
            </select>
            <Button onClick={() => { setQuery(""); setDifficulty(""); }} variant="ghost">Reset</Button>
          </div>
          <ul className="space-y-3">
            {(loading ? [] : filtered).map((c: any) => (
              <li key={c._id} className="glass glass-hover p-6 cursor-pointer">
                <div className="flex items-center justify-between">
                  <div className="flex-1">
                    <div className="font-semibold text-lg mb-1">{c.title}</div>
                    <div className="text-sm text-[var(--color-muted)] line-clamp-2">{c.description}</div>
                  </div>
                  <div className="glass px-3 py-1 text-xs font-medium ml-4">{c.difficulty}</div>
                </div>
              </li>
            ))}
            {(!loading && filtered.length === 0) && (
              <div className="text-sm text-[var(--color-muted)]">No challenges yet.</div>
            )}
          </ul>
        </CardBody>
      </Card>
    </main>
  );
}


